// <auto-generated />
using System;
using LearningVideoApi.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace LearningVideoApi.Migrations
{
    [DbContext(typeof(LearningVideoDbContext))]
    [Migration("20240307104710_Reinitv3.1")]
    partial class Reinitv31
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LearningVideoApi.Infrastructure.Entities.Topics.TopicEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TopicEntity");
                });

            modelBuilder.Entity("LearningVideoApi.Infrastructure.Entities.Topics.TopicVideoEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TopicId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VideoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.HasIndex("VideoId");

                    b.ToTable("TopicVideoEntity");
                });

            modelBuilder.Entity("LearningVideoApi.Infrastructure.Entities.Videos.VideoEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<long>("CommentCount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("LikeCount")
                        .HasColumnType("bigint");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlainTextWithTopic")
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Title", "Description", "Level" });

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ViewerCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("Video", (string)null);
                });

            modelBuilder.Entity("LearningVideoApi.Infrastructure.Entities.Videos.VideoSubtitleEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SrcLang")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VideoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("VideoId");

                    b.ToTable("VideoSubtitle", (string)null);
                });

            modelBuilder.Entity("LearningVideoApi.Infrastructure.Entities.Vocabularies.VocabularyEntity", b =>
                {
                    b.Property<string>("OriginWord")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Example")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OppositeMeaning")
                        .HasColumnType("text");

                    b.Property<string>("Pinyin")
                        .HasColumnType("text");

                    b.Property<string>("SimiliarMeaning")
                        .HasColumnType("text");

                    b.Property<string>("SinoVietnamese")
                        .HasColumnType("text");

                    b.Property<string>("VietnameseMean")
                        .HasColumnType("text");

                    b.Property<string>("WordType")
                        .HasColumnType("text");

                    b.HasKey("OriginWord");

                    b.ToTable("Vocabulary", (string)null);
                });

            modelBuilder.Entity("LearningVideoApi.Infrastructure.Entities.WatchedVideos.WatchedVideoEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("VideoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("VideoId");

                    b.ToTable("WatchedVideo", (string)null);
                });

            modelBuilder.Entity("LearningVideoApi.Infrastructure.Entities.Topics.TopicVideoEntity", b =>
                {
                    b.HasOne("LearningVideoApi.Infrastructure.Entities.Topics.TopicEntity", "Topic")
                        .WithMany("TopicVideos")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningVideoApi.Infrastructure.Entities.Videos.VideoEntity", "Video")
                        .WithMany("TopicVideos")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("LearningVideoApi.Infrastructure.Entities.Videos.VideoSubtitleEntity", b =>
                {
                    b.HasOne("LearningVideoApi.Infrastructure.Entities.Videos.VideoEntity", "Video")
                        .WithMany("Subtitles")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Video");
                });

            modelBuilder.Entity("LearningVideoApi.Infrastructure.Entities.WatchedVideos.WatchedVideoEntity", b =>
                {
                    b.HasOne("LearningVideoApi.Infrastructure.Entities.Videos.VideoEntity", "Video")
                        .WithMany("WatchedVideos")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Video");
                });

            modelBuilder.Entity("LearningVideoApi.Infrastructure.Entities.Topics.TopicEntity", b =>
                {
                    b.Navigation("TopicVideos");
                });

            modelBuilder.Entity("LearningVideoApi.Infrastructure.Entities.Videos.VideoEntity", b =>
                {
                    b.Navigation("Subtitles");

                    b.Navigation("TopicVideos");

                    b.Navigation("WatchedVideos");
                });
#pragma warning restore 612, 618
        }
    }
}
